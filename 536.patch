From e39fc03f93cd258db93381bf92ab4e9c360972ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 16:01:37 +0100
Subject: [PATCH 01/11] croco/stylesheet: Move ref-count to private structure

This always meant to be a private bit so there's no point to expose it.

Also adding a private area will allow us to add some more bits we don't
want to be directly modifiable from outside.
---
 src/st/croco/cr-stylesheet.c | 35 +++++++++++++++++++++++++++++------
 src/st/croco/cr-stylesheet.h | 11 +++--------
 2 files changed, 32 insertions(+), 14 deletions(-)

diff --git a/src/st/croco/cr-stylesheet.c b/src/st/croco/cr-stylesheet.c
index 69909da245..5c9c77af56 100644
--- a/src/st/croco/cr-stylesheet.c
+++ b/src/st/croco/cr-stylesheet.c
@@ -28,6 +28,17 @@
  *The definition of the #CRStyleSheet class
  */
 
+struct _CRStyleSheetPriv {
+        /**
+         *the reference count of this instance of #CRStyleSheet.
+         *It can be manipulated with cr_stylesheet_ref() and
+         *cr_stylesheet_unref()
+        */
+        gulong ref_count;
+};
+
+#define PRIVATE(obj) ((obj)->priv)
+
 /**
  *Constructor of the #CRStyleSheet class.
  *@param the initial list of css statements.
@@ -49,6 +60,14 @@ cr_stylesheet_new (CRStatement * a_stmts)
         if (a_stmts)
                 result->statements = a_stmts;
 
+        PRIVATE (result) = g_try_malloc (sizeof (CRStyleSheetPriv));
+        if (!PRIVATE (result)) {
+                cr_utils_trace_info ("Out of memory");
+                g_free (result);
+                return NULL;
+        }
+        memset (PRIVATE (result), 0, sizeof (CRStyleSheetPriv));
+
         return result;
 }
 
@@ -140,20 +159,20 @@ cr_stylesheet_statement_get_from_list (CRStyleSheet * a_this, int itemnr)
 void
 cr_stylesheet_ref (CRStyleSheet * a_this)
 {
-        g_return_if_fail (a_this);
+        g_return_if_fail (a_this && PRIVATE (a_this));
 
-        a_this->ref_count++;
+        PRIVATE (a_this)->ref_count++;
 }
 
 gboolean
 cr_stylesheet_unref (CRStyleSheet * a_this)
 {
-        g_return_val_if_fail (a_this, FALSE);
+        g_return_val_if_fail (a_this && PRIVATE (a_this), FALSE);
 
-        if (a_this->ref_count)
-                a_this->ref_count--;
+        if (PRIVATE (a_this)->ref_count)
+                PRIVATE (a_this)->ref_count--;
 
-        if (!a_this->ref_count) {
+        if (!PRIVATE (a_this)->ref_count) {
                 cr_stylesheet_destroy (a_this);
                 return TRUE;
         }
@@ -174,5 +193,9 @@ cr_stylesheet_destroy (CRStyleSheet * a_this)
                 cr_statement_destroy (a_this->statements);
                 a_this->statements = NULL;
         }
+        if (PRIVATE (a_this)) {
+                g_free (PRIVATE (a_this));
+                PRIVATE (a_this) = NULL;
+        }
         g_free (a_this);
 }
diff --git a/src/st/croco/cr-stylesheet.h b/src/st/croco/cr-stylesheet.h
index 2d6b4fa0f6..5b265841ab 100644
--- a/src/st/croco/cr-stylesheet.h
+++ b/src/st/croco/cr-stylesheet.h
@@ -34,6 +34,7 @@ G_BEGIN_DECLS
  *The declaration of the #CRStyleSheet class.
  */
 
+typedef struct _CRStyleSheetPriv CRStyleSheetPriv;
 
 enum CRStyleOrigin
 {
@@ -56,6 +57,8 @@ enum CRStyleOrigin
  */
 struct _CRStyleSheet
 {
+        CRStyleSheetPriv *priv;
+
 	/**The css statements list*/
 	CRStatement *statements ;
 
@@ -72,14 +75,6 @@ struct _CRStyleSheet
 	 *Can be used by applications.
 	 */
 	gpointer app_data ;
-
-	/**
-	 *the reference count of this instance
-	 *Please, don't never ever modify it
-	 *directly. Use cr_stylesheet_ref()
-	 *and cr_stylesheet_unref() instead.
-	 */
-	gulong ref_count ;
 } ;
 
 CRStyleSheet * cr_stylesheet_new (CRStatement *a_stmts) ;
-- 
GitLab


From 8e7138cf7449f389d2a6155627dcf2ac6ed398f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 14:39:43 +0100
Subject: [PATCH 02/11] croco/stylesheet: Return the ref'ed stylesheet on ref
 function

Make cr_stylesheet_ref to return ref'ed instance so that we can use this
on the caller function to make clear what we're passing.

This follows the expected design in GLib world.
---
 src/st/croco/cr-stylesheet.c | 6 ++++--
 src/st/croco/cr-stylesheet.h | 2 +-
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/st/croco/cr-stylesheet.c b/src/st/croco/cr-stylesheet.c
index 5c9c77af56..9ddc06e133 100644
--- a/src/st/croco/cr-stylesheet.c
+++ b/src/st/croco/cr-stylesheet.c
@@ -156,12 +156,14 @@ cr_stylesheet_statement_get_from_list (CRStyleSheet * a_this, int itemnr)
         return cr_statement_get_from_list (a_this->statements, itemnr);
 }
 
-void
+CRStyleSheet *
 cr_stylesheet_ref (CRStyleSheet * a_this)
 {
-        g_return_if_fail (a_this && PRIVATE (a_this));
+        g_return_val_if_fail (a_this && PRIVATE (a_this), NULL);
 
         PRIVATE (a_this)->ref_count++;
+
+        return a_this;
 }
 
 gboolean
diff --git a/src/st/croco/cr-stylesheet.h b/src/st/croco/cr-stylesheet.h
index 5b265841ab..9a5efa37cf 100644
--- a/src/st/croco/cr-stylesheet.h
+++ b/src/st/croco/cr-stylesheet.h
@@ -86,7 +86,7 @@ gint cr_stylesheet_nr_rules (CRStyleSheet const *a_this) ;
 
 CRStatement * cr_stylesheet_statement_get_from_list (CRStyleSheet *a_this, int itemnr) ;
 
-void cr_stylesheet_ref (CRStyleSheet *a_this) ;
+CRStyleSheet * cr_stylesheet_ref (CRStyleSheet *a_this) ;
 
 gboolean cr_stylesheet_unref (CRStyleSheet *a_this) ;
 
-- 
GitLab


From c836093392b7cb3396fd15896b97ea835afd7a12 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 14:22:13 +0100
Subject: [PATCH 03/11] croco/stylesheet: Move app_data to private area and add
 DestroyNotify support

Stylesheet data used to be a simple pointer modifiable by any
application and never touched by libcroco itself.

However it's useful to make the library control its lifecycle together
with the stylesheet itself when a destroy notify function is defined.

So, move the app_data pointer to the private area so that we prevent it
to be modified from applications and add a GDestroyNotify function as well.

As per this define a getter and setter that allows to manage it safely.
---
 src/st/croco/cr-stylesheet.c | 44 ++++++++++++++++++++++++++++++++++++
 src/st/croco/cr-stylesheet.h |  9 +++-----
 src/st/st-theme.c            |  9 ++++----
 3 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/src/st/croco/cr-stylesheet.c b/src/st/croco/cr-stylesheet.c
index 9ddc06e133..17295f065f 100644
--- a/src/st/croco/cr-stylesheet.c
+++ b/src/st/croco/cr-stylesheet.c
@@ -35,6 +35,16 @@ struct _CRStyleSheetPriv {
          *cr_stylesheet_unref()
         */
         gulong ref_count;
+
+        /**
+         *custom application data pointer
+         *Can be used by applications.
+         *libcroco itself will handle its destruction
+         *if app_data_destroy_func is set via
+         *cr_stylesheet_set_app_data().
+         */
+        gpointer app_data;
+        GDestroyNotify app_data_destroy_func;
 };
 
 #define PRIVATE(obj) ((obj)->priv)
@@ -182,6 +192,15 @@ cr_stylesheet_unref (CRStyleSheet * a_this)
         return FALSE;
 }
 
+static void
+cleanup_app_data (CRStyleSheetPriv * priv)
+{
+        if (priv->app_data_destroy_func) {
+                g_clear_pointer (&priv->app_data, priv->app_data_destroy_func);
+                priv->app_data_destroy_func = NULL;
+        }
+}
+
 /**
  *Destructor of the #CRStyleSheet class.
  *@param a_this the current instance of the #CRStyleSheet class.
@@ -196,8 +215,33 @@ cr_stylesheet_destroy (CRStyleSheet * a_this)
                 a_this->statements = NULL;
         }
         if (PRIVATE (a_this)) {
+                cleanup_app_data (PRIVATE (a_this));
                 g_free (PRIVATE (a_this));
                 PRIVATE (a_this) = NULL;
         }
         g_free (a_this);
 }
+
+void
+cr_stylesheet_set_app_data (CRStyleSheet   * a_this,
+                            gpointer         app_data,
+                            GDestroyNotify   app_data_destroy_func)
+{
+        CRStyleSheetPriv * priv;
+
+        g_return_if_fail (a_this && PRIVATE (a_this));
+
+        priv = PRIVATE (a_this);
+        cleanup_app_data (priv);
+
+        priv->app_data = app_data;
+        priv->app_data_destroy_func = app_data_destroy_func;
+}
+
+gpointer
+cr_stylesheet_get_app_data (CRStyleSheet *a_this)
+{
+        g_return_val_if_fail (a_this && PRIVATE (a_this), NULL);
+
+        return PRIVATE (a_this)->app_data;
+}
diff --git a/src/st/croco/cr-stylesheet.h b/src/st/croco/cr-stylesheet.h
index 9a5efa37cf..fc20cc808b 100644
--- a/src/st/croco/cr-stylesheet.h
+++ b/src/st/croco/cr-stylesheet.h
@@ -69,12 +69,6 @@ struct _CRStyleSheet
 
 	/**custom data used by libcroco*/
 	gpointer croco_data ;
-
-	/**
-	 *custom application data pointer
-	 *Can be used by applications.
-	 */
-	gpointer app_data ;
 } ;
 
 CRStyleSheet * cr_stylesheet_new (CRStatement *a_stmts) ;
@@ -92,6 +86,9 @@ gboolean cr_stylesheet_unref (CRStyleSheet *a_this) ;
 
 void cr_stylesheet_destroy (CRStyleSheet *a_this) ;
 
+void cr_stylesheet_set_app_data (CRStyleSheet *a_this, gpointer app_data, GDestroyNotify app_data_destroy_func);
+gpointer cr_stylesheet_get_app_data (CRStyleSheet *a_this);
+
 G_END_DECLS
 
 #endif /*__CR_STYLESHEET_H__*/
diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index 20d42fd334..a704c5ac05 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -207,7 +207,7 @@ parse_stylesheet (GFile   *file,
     }
 
   /* Extension stylesheet */
-  stylesheet->app_data = GUINT_TO_POINTER (FALSE);
+  cr_stylesheet_set_app_data (stylesheet, GUINT_TO_POINTER (FALSE), NULL);
 
   return stylesheet;
 }
@@ -271,7 +271,7 @@ st_theme_load_stylesheet (StTheme    *theme,
   if (!stylesheet)
     return FALSE;
 
-  stylesheet->app_data = GUINT_TO_POINTER (TRUE);
+  cr_stylesheet_set_app_data (stylesheet, GUINT_TO_POINTER (TRUE), NULL);
 
   insert_stylesheet (theme, file, stylesheet);
   cr_stylesheet_ref (stylesheet);
@@ -979,8 +979,9 @@ add_matched_properties (StTheme      *a_this,
 static inline int
 get_origin (const CRDeclaration * decl)
 {
-  enum CRStyleOrigin origin = decl->parent_statement->parent_sheet->origin;
-  gboolean is_extension_sheet = GPOINTER_TO_UINT (decl->parent_statement->parent_sheet->app_data);
+  CRStyleSheet *stylesheet = decl->parent_statement->parent_sheet;
+  enum CRStyleOrigin origin = stylesheet->origin;
+  gboolean is_extension_sheet = GPOINTER_TO_UINT (cr_stylesheet_get_app_data (stylesheet));
 
   if (decl->important)
     origin += ORIGIN_OFFSET_IMPORTANT;
-- 
GitLab


From 9f87b4cf59faf469a732add5cdf609639a74e6d3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 15:30:20 +0100
Subject: [PATCH 04/11] croco: Coherently initialize objects ref counting to 1

Croco used to initialize most objects with a 0 ref-counting even though
it will behave exactly the same as an object with just one reference at
destruction time.
Exception was CRDocHandler which already followed this schema.

This is incoherent to what GLib does, given that at destruction time an
object with 1 reference will be still destroyed ad unref phase, and that
all the objects provide also a destroy function to ignore ref-counting
we can safely just ensure we always init objects with valid
ref-counting.

This required some minor code adaptation inside croco itself as we need
to ensure that we don't leak when an object is created and passed around
if referenced again.
---
 src/st/croco/cr-cascade.c     |  1 +
 src/st/croco/cr-declaration.c | 10 +++++-----
 src/st/croco/cr-input.c       |  1 +
 src/st/croco/cr-om-parser.c   | 11 +++++------
 src/st/croco/cr-parser.c      | 36 +++++++++--------------------------
 src/st/croco/cr-selector.c    |  3 ++-
 src/st/croco/cr-statement.c   |  3 ++-
 src/st/croco/cr-stylesheet.c  |  1 +
 src/st/croco/cr-term.c        |  1 +
 src/st/croco/cr-tknzr.c       |  3 +++
 10 files changed, 30 insertions(+), 40 deletions(-)

diff --git a/src/st/croco/cr-cascade.c b/src/st/croco/cr-cascade.c
index 68f59bb2da..16d72213f7 100644
--- a/src/st/croco/cr-cascade.c
+++ b/src/st/croco/cr-cascade.c
@@ -80,6 +80,7 @@ cr_cascade_new (CRStyleSheet * a_author_sheet,
                 return NULL;
         }
         memset (PRIVATE (result), 0, sizeof (CRCascadePriv));
+        PRIVATE (result)->ref_count = 1;
 
         if (a_author_sheet) {
                 cr_cascade_set_sheet (result, a_author_sheet, ORIGIN_AUTHOR);
diff --git a/src/st/croco/cr-declaration.c b/src/st/croco/cr-declaration.c
index bf1bcc1cd0..506c2c36f8 100644
--- a/src/st/croco/cr-declaration.c
+++ b/src/st/croco/cr-declaration.c
@@ -94,6 +94,7 @@ cr_declaration_new (CRStatement * a_statement,
         memset (result, 0, sizeof (CRDeclaration));
         result->property = a_property;
         result->value = a_value;
+        result->ref_count = 1;
 
         if (a_value) {
                 cr_term_ref (a_value);
@@ -145,7 +146,7 @@ cr_declaration_parse_from_buf (CRStatement * a_statement,
         result = cr_declaration_new (a_statement, property, value);
         if (result) {
                 property = NULL;
-                value = NULL;
+                g_clear_pointer (&value, cr_term_unref);
                 result->important = important;
         }
 
@@ -216,7 +217,7 @@ cr_declaration_parse_list_from_buf (const guchar * a_str,
         result = cr_declaration_new (NULL, property, value);
         if (result) {
                 property = NULL;
-                value = NULL;
+                g_clear_pointer (&value, cr_term_unref);
                 result->important = important;
         }
         /*now, go parse the other declarations */
@@ -248,10 +249,9 @@ cr_declaration_parse_list_from_buf (const guchar * a_str,
                 cur_decl = cr_declaration_new (NULL, property, value);
                 if (cur_decl) {
                         cur_decl->important = important;
-                        result = cr_declaration_append (result, cur_decl);
+                        result = cr_declaration_append (result, g_steal_pointer (&cur_decl));
+                        g_clear_pointer (&value, cr_term_unref);
                         property = NULL;
-                        value = NULL;
-                        cur_decl = NULL;
                 } else {
                         break;
                 }
diff --git a/src/st/croco/cr-input.c b/src/st/croco/cr-input.c
index 430e75ed8d..622d045821 100644
--- a/src/st/croco/cr-input.c
+++ b/src/st/croco/cr-input.c
@@ -104,6 +104,7 @@ cr_input_new_real (void)
                 return NULL;
         }
         memset (PRIVATE (result), 0, sizeof (CRInputPriv));
+        PRIVATE (result)->ref_count = 1;
         PRIVATE (result)->free_in_buf = TRUE;
         return result;
 }
diff --git a/src/st/croco/cr-om-parser.c b/src/st/croco/cr-om-parser.c
index 90f7106219..ba000a570a 100644
--- a/src/st/croco/cr-om-parser.c
+++ b/src/st/croco/cr-om-parser.c
@@ -1062,13 +1062,12 @@ cr_om_parser_parse_paths_to_cascade (CROMParser * a_this,
                 }
         }
         result = cr_cascade_new (sheets[0], sheets[1], sheets[2]);
-        if (!result) {
-                for (i = 0; i < 3; i++) {
-                        cr_stylesheet_unref (sheets[i]);
-                        sheets[i] = 0;
-                }
+        for (i = 0; i < 3; i++)
+                g_clear_pointer (&sheets[i], cr_stylesheet_unref);
+
+        if (!result)
                 return CR_ERROR;
-        }
+
         *a_result = result;
         return CR_OK;
 }
diff --git a/src/st/croco/cr-parser.c b/src/st/croco/cr-parser.c
index d4f40cf1de..1b836cc90d 100644
--- a/src/st/croco/cr-parser.c
+++ b/src/st/croco/cr-parser.c
@@ -1617,9 +1617,7 @@ cr_parser_parse_term (CRParser * a_this, CRTerm ** a_term)
         }
         cr_parsing_location_copy (&result->location,
                                   &location) ;
-        *a_term = cr_term_append_term (*a_term, result);
-
-        result = NULL;
+        *a_term = cr_term_append_term (*a_term, g_steal_pointer (&result));
 
         cr_parser_try_to_skip_spaces_and_comments (a_this);
 
@@ -2808,11 +2806,11 @@ cr_parser_new_from_buf (guchar * a_buf,
         g_return_val_if_fail (input, NULL);
 
         result = cr_parser_new_from_input (input);
-        if (!result) {
-                cr_input_destroy (input);
-                input = NULL;
+        cr_input_unref (input);
+
+        if (!result)
                 return NULL;
-        }
+
         return result;
 }
 
@@ -2834,6 +2832,7 @@ cr_parser_new_from_input (CRInput * a_input)
         }
 
         result = cr_parser_new (tokenizer);
+        g_clear_pointer (&tokenizer, cr_tknzr_unref);
         g_return_val_if_fail (result, NULL);
 
         return result;
@@ -2859,6 +2858,7 @@ cr_parser_new_from_file (const guchar * a_file_uri, enum CREncoding a_enc)
         }
 
         result = cr_parser_new (tokenizer);
+        cr_tknzr_unref (tokenizer);
         g_return_val_if_fail (result, NULL);
         return result;
 }
@@ -3001,6 +3001,7 @@ cr_parser_parse_file (CRParser * a_this,
         g_return_val_if_fail (tknzr != NULL, CR_ERROR);
 
         status = cr_parser_set_tknzr (a_this, tknzr);
+        cr_tknzr_unref (tknzr);
         g_return_val_if_fail (status == CR_OK, CR_ERROR);
 
         status = cr_parser_parse (a_this);
@@ -3367,14 +3368,6 @@ cr_parser_parse_ruleset (CRParser * a_this)
 
         if (PRIVATE (a_this)->sac_handler
             && PRIVATE (a_this)->sac_handler->start_selector) {
-                /*
-                 *the selector is ref counted so that the parser's user
-                 *can choose to keep it.
-                 */
-                if (selector) {
-                        cr_selector_ref (selector);
-                }
-
                 PRIVATE (a_this)->sac_handler->start_selector
                         (PRIVATE (a_this)->sac_handler, selector);
                 start_selector = TRUE;
@@ -3387,9 +3380,6 @@ cr_parser_parse_ruleset (CRParser * a_this)
         status = cr_parser_parse_declaration (a_this, &property,
                                               &expr,
                                               &is_important);
-        if (expr) {
-                cr_term_ref (expr);
-        }
         if (status == CR_OK
             && PRIVATE (a_this)->sac_handler
             && PRIVATE (a_this)->sac_handler->property) {
@@ -3442,9 +3432,6 @@ cr_parser_parse_ruleset (CRParser * a_this)
                 status = cr_parser_parse_declaration (a_this, &property,
                                                       &expr, &is_important);
 
-                if (expr) {
-                        cr_term_ref (expr);
-                }
                 if (status == CR_OK
                     && PRIVATE (a_this)->sac_handler
                     && PRIVATE (a_this)->sac_handler->property) {
@@ -3980,9 +3967,6 @@ cr_parser_parse_page (CRParser * a_this)
          */
         if (PRIVATE (a_this)->sac_handler
             && PRIVATE (a_this)->sac_handler->property) {
-                if (css_expression)
-                        cr_term_ref (css_expression);
-
                 PRIVATE (a_this)->sac_handler->property
                         (PRIVATE (a_this)->sac_handler,
                          property, css_expression, important);
@@ -4034,7 +4018,6 @@ cr_parser_parse_page (CRParser * a_this)
                  */
                 if (PRIVATE (a_this)->sac_handler
                     && PRIVATE (a_this)->sac_handler->property) {
-                        cr_term_ref (css_expression);
                         PRIVATE (a_this)->sac_handler->property
                                 (PRIVATE (a_this)->sac_handler,
                                  property, css_expression, important);
@@ -4281,7 +4264,6 @@ cr_parser_parse_font_face (CRParser * a_this)
                 /*
                  *here, call the relevant SAC handler.
                  */
-                cr_term_ref (css_expression);
                 if (PRIVATE (a_this)->sac_handler &&
                     PRIVATE (a_this)->sac_handler->property) {
                         PRIVATE (a_this)->sac_handler->property
@@ -4316,7 +4298,6 @@ cr_parser_parse_font_face (CRParser * a_this)
                 /*
                  *here, call the relevant SAC handler.
                  */
-                cr_term_ref (css_expression);
                 if (PRIVATE (a_this)->sac_handler->property) {
                         PRIVATE (a_this)->sac_handler->property
                                 (PRIVATE (a_this)->sac_handler,
@@ -4492,6 +4473,7 @@ cr_parser_parse_buf (CRParser * a_this,
         g_return_val_if_fail (tknzr != NULL, CR_ERROR);
 
         status = cr_parser_set_tknzr (a_this, tknzr);
+        cr_tknzr_unref (tknzr);
         g_return_val_if_fail (status == CR_OK, CR_ERROR);
 
         status = cr_parser_parse (a_this);
diff --git a/src/st/croco/cr-selector.c b/src/st/croco/cr-selector.c
index 8902e1c0f1..b24d8ef1f1 100644
--- a/src/st/croco/cr-selector.c
+++ b/src/st/croco/cr-selector.c
@@ -47,6 +47,7 @@ cr_selector_new (CRSimpleSel * a_simple_sel)
         }
         memset (result, 0, sizeof (CRSelector));
         result->simple_sel = a_simple_sel;
+        result->ref_count = 1;
         return result;
 }
 
@@ -134,7 +135,7 @@ cr_selector_append_simple_sel (CRSelector * a_this,
         selector = cr_selector_new (a_simple_sel);
         g_return_val_if_fail (selector, NULL);
 
-        return cr_selector_append (a_this, selector);
+        return cr_selector_append (a_this, g_steal_pointer (&selector));
 }
 
 guchar *
diff --git a/src/st/croco/cr-statement.c b/src/st/croco/cr-statement.c
index 376617c60c..8759af7a36 100644
--- a/src/st/croco/cr-statement.c
+++ b/src/st/croco/cr-statement.c
@@ -204,7 +204,8 @@ parse_page_property_cb (CRDocHandler * a_this,
         g_return_if_fail (decl);
         decl->important = a_important;
         stmt->kind.page_rule->decl_list =
-                cr_declaration_append (stmt->kind.page_rule->decl_list, decl);
+                cr_declaration_append (stmt->kind.page_rule->decl_list,
+                                       g_steal_pointer (&decl));
         g_return_if_fail (stmt->kind.page_rule->decl_list);
 }
 
diff --git a/src/st/croco/cr-stylesheet.c b/src/st/croco/cr-stylesheet.c
index 17295f065f..eef0125382 100644
--- a/src/st/croco/cr-stylesheet.c
+++ b/src/st/croco/cr-stylesheet.c
@@ -77,6 +77,7 @@ cr_stylesheet_new (CRStatement * a_stmts)
                 return NULL;
         }
         memset (PRIVATE (result), 0, sizeof (CRStyleSheetPriv));
+        PRIVATE (result)->ref_count = 1;
 
         return result;
 }
diff --git a/src/st/croco/cr-term.c b/src/st/croco/cr-term.c
index 4235241938..ae8ea557af 100644
--- a/src/st/croco/cr-term.c
+++ b/src/st/croco/cr-term.c
@@ -92,6 +92,7 @@ cr_term_new (void)
                 return NULL;
         }
         memset (result, 0, sizeof (CRTerm));
+        result->ref_count = 1;
         return result;
 }
 
diff --git a/src/st/croco/cr-tknzr.c b/src/st/croco/cr-tknzr.c
index 54f18f270c..e42888687c 100644
--- a/src/st/croco/cr-tknzr.c
+++ b/src/st/croco/cr-tknzr.c
@@ -1618,6 +1618,7 @@ cr_tknzr_new (CRInput * a_input)
                 return NULL;
         }
         memset (result->priv, 0, sizeof (CRTknzrPriv));
+        result->priv->ref_count = 1;
         if (a_input)
                 cr_tknzr_set_input (result, a_input);
         return result;
@@ -1637,6 +1638,7 @@ cr_tknzr_new_from_buf (guchar * a_buf, gulong a_len,
         g_return_val_if_fail (input != NULL, NULL);
 
         result = cr_tknzr_new (input);
+        cr_input_unref (input);
 
         return result;
 }
@@ -1652,6 +1654,7 @@ cr_tknzr_new_from_uri (const guchar * a_file_uri,
         g_return_val_if_fail (input != NULL, NULL);
 
         result = cr_tknzr_new (input);
+        cr_input_unref (input);
 
         return result;
 }
-- 
GitLab


From 96d1179403e3b9169701abdc09c12a7ce8190b5f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 15:44:56 +0100
Subject: [PATCH 05/11] croco: Ensure ref counting is a valid value when
 unreffing

As per previous commit we always initialize the objects with a positive
ref count, so we can stop handling 0-ref-count as 1-ref-count when
unreffing and always require this to be a positive value.
---
 src/st/croco/cr-cascade.c     | 5 +++--
 src/st/croco/cr-declaration.c | 5 ++---
 src/st/croco/cr-doc-handler.c | 5 ++---
 src/st/croco/cr-input.c       | 5 ++---
 src/st/croco/cr-selector.c    | 5 ++---
 src/st/croco/cr-stylesheet.c  | 4 ++--
 src/st/croco/cr-term.c        | 5 ++---
 src/st/croco/cr-tknzr.c       | 5 ++---
 8 files changed, 17 insertions(+), 22 deletions(-)

diff --git a/src/st/croco/cr-cascade.c b/src/st/croco/cr-cascade.c
index 16d72213f7..519aff599c 100644
--- a/src/st/croco/cr-cascade.c
+++ b/src/st/croco/cr-cascade.c
@@ -179,8 +179,9 @@ cr_cascade_unref (CRCascade * a_this)
 {
         g_return_if_fail (a_this && PRIVATE (a_this));
 
-        if (PRIVATE (a_this)->ref_count)
-                PRIVATE (a_this)->ref_count--;
+        g_assert (PRIVATE (a_this)->ref_count > 0);
+        PRIVATE (a_this)->ref_count--;
+
         if (!PRIVATE (a_this)->ref_count) {
                 cr_cascade_destroy (a_this);
         }
diff --git a/src/st/croco/cr-declaration.c b/src/st/croco/cr-declaration.c
index 506c2c36f8..0e2a7b62f5 100644
--- a/src/st/croco/cr-declaration.c
+++ b/src/st/croco/cr-declaration.c
@@ -748,9 +748,8 @@ cr_declaration_unref (CRDeclaration * a_this)
 {
         g_return_val_if_fail (a_this, FALSE);
 
-        if (a_this->ref_count) {
-                a_this->ref_count--;
-        }
+        g_assert (a_this->ref_count > 0);
+        a_this->ref_count--;
 
         if (a_this->ref_count == 0) {
                 cr_declaration_destroy (a_this);
diff --git a/src/st/croco/cr-doc-handler.c b/src/st/croco/cr-doc-handler.c
index b0ef13c072..94246469d7 100644
--- a/src/st/croco/cr-doc-handler.c
+++ b/src/st/croco/cr-doc-handler.c
@@ -228,9 +228,8 @@ cr_doc_handler_unref (CRDocHandler * a_this)
 {
         g_return_val_if_fail (a_this, FALSE);
 
-        if (a_this->ref_count > 0) {
-                a_this->ref_count--;
-        }
+        g_assert (a_this->ref_count > 0);
+        a_this->ref_count--;
 
         if (a_this->ref_count == 0) {
                 cr_doc_handler_destroy (a_this);
diff --git a/src/st/croco/cr-input.c b/src/st/croco/cr-input.c
index 622d045821..b636470675 100644
--- a/src/st/croco/cr-input.c
+++ b/src/st/croco/cr-input.c
@@ -329,9 +329,8 @@ cr_input_unref (CRInput * a_this)
 {
         g_return_val_if_fail (a_this && PRIVATE (a_this), FALSE);
 
-        if (PRIVATE (a_this)->ref_count) {
-                PRIVATE (a_this)->ref_count--;
-        }
+        g_assert (PRIVATE(a_this)->ref_count > 0);
+        PRIVATE(a_this)->ref_count--;
 
         if (PRIVATE (a_this)->ref_count == 0) {
                 cr_input_destroy (a_this);
diff --git a/src/st/croco/cr-selector.c b/src/st/croco/cr-selector.c
index b24d8ef1f1..de3e1ac581 100644
--- a/src/st/croco/cr-selector.c
+++ b/src/st/croco/cr-selector.c
@@ -237,9 +237,8 @@ cr_selector_unref (CRSelector * a_this)
 {
         g_return_val_if_fail (a_this, FALSE);
 
-        if (a_this->ref_count) {
-                a_this->ref_count--;
-        }
+        g_assert (a_this->ref_count > 0);
+        a_this->ref_count--;
 
         if (a_this->ref_count == 0) {
                 cr_selector_destroy (a_this);
diff --git a/src/st/croco/cr-stylesheet.c b/src/st/croco/cr-stylesheet.c
index eef0125382..e119067d52 100644
--- a/src/st/croco/cr-stylesheet.c
+++ b/src/st/croco/cr-stylesheet.c
@@ -182,8 +182,8 @@ cr_stylesheet_unref (CRStyleSheet * a_this)
 {
         g_return_val_if_fail (a_this && PRIVATE (a_this), FALSE);
 
-        if (PRIVATE (a_this)->ref_count)
-                PRIVATE (a_this)->ref_count--;
+        g_assert (PRIVATE (a_this)->ref_count > 0);
+        PRIVATE (a_this)->ref_count--;
 
         if (!PRIVATE (a_this)->ref_count) {
                 cr_stylesheet_destroy (a_this);
diff --git a/src/st/croco/cr-term.c b/src/st/croco/cr-term.c
index ae8ea557af..0a26803c59 100644
--- a/src/st/croco/cr-term.c
+++ b/src/st/croco/cr-term.c
@@ -753,9 +753,8 @@ cr_term_unref (CRTerm * a_this)
 {
         g_return_val_if_fail (a_this, FALSE);
 
-        if (a_this->ref_count) {
-                a_this->ref_count--;
-        }
+        g_assert (a_this->ref_count > 0);
+        a_this->ref_count--;
 
         if (a_this->ref_count == 0) {
                 cr_term_destroy (a_this);
diff --git a/src/st/croco/cr-tknzr.c b/src/st/croco/cr-tknzr.c
index e42888687c..b78a6f135c 100644
--- a/src/st/croco/cr-tknzr.c
+++ b/src/st/croco/cr-tknzr.c
@@ -1672,9 +1672,8 @@ cr_tknzr_unref (CRTknzr * a_this)
 {
         g_return_val_if_fail (a_this && PRIVATE (a_this), FALSE);
 
-        if (PRIVATE (a_this)->ref_count > 0) {
-                PRIVATE (a_this)->ref_count--;
-        }
+        g_assert (PRIVATE (a_this)->ref_count > 0);
+        PRIVATE (a_this)->ref_count--;
 
         if (PRIVATE (a_this)->ref_count == 0) {
                 cr_tknzr_destroy (a_this);
-- 
GitLab


From a5c7fca5808221930a2dcb40589956dc9dcfa5ab Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 15:06:30 +0100
Subject: [PATCH 06/11] croco/stylesheet: Define the autoptr cleanup function
 for CRStyleSheet

---
 src/st/croco/cr-stylesheet.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/st/croco/cr-stylesheet.h b/src/st/croco/cr-stylesheet.h
index fc20cc808b..92dd7b7cac 100644
--- a/src/st/croco/cr-stylesheet.h
+++ b/src/st/croco/cr-stylesheet.h
@@ -89,6 +89,8 @@ void cr_stylesheet_destroy (CRStyleSheet *a_this) ;
 void cr_stylesheet_set_app_data (CRStyleSheet *a_this, gpointer app_data, GDestroyNotify app_data_destroy_func);
 gpointer cr_stylesheet_get_app_data (CRStyleSheet *a_this);
 
+G_DEFINE_AUTOPTR_CLEANUP_FUNC (CRStyleSheet, cr_stylesheet_ref);
+
 G_END_DECLS
 
 #endif /*__CR_STYLESHEET_H__*/
-- 
GitLab


From 39a43498b2326e6cd63e471f4339eef20f3ded04 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Wed, 17 Feb 2021 17:15:19 +0100
Subject: [PATCH 07/11] st/theme: Unref initialized stylesheets when not needed

Since now croco initializes referenced objects we need to cleanup them
once we've done with them.

Given we've just an entry point to create stylesheets we can just
unref its return value all the times, and in case we keep a reference
when the stylesheet is inserted.
---
 src/st/st-theme.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index a704c5ac05..48775c7281 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -265,7 +265,7 @@ st_theme_load_stylesheet (StTheme    *theme,
                           GFile      *file,
                           GError    **error)
 {
-  CRStyleSheet *stylesheet;
+  g_autoptr(CRStyleSheet) stylesheet = NULL;
 
   stylesheet = parse_stylesheet (file, error);
   if (!stylesheet)
@@ -274,8 +274,8 @@ st_theme_load_stylesheet (StTheme    *theme,
   cr_stylesheet_set_app_data (stylesheet, GUINT_TO_POINTER (TRUE), NULL);
 
   insert_stylesheet (theme, file, stylesheet);
-  cr_stylesheet_ref (stylesheet);
-  theme->custom_stylesheets = g_slist_prepend (theme->custom_stylesheets, stylesheet);
+  theme->custom_stylesheets = g_slist_prepend (theme->custom_stylesheets,
+                                               g_steal_pointer (&stylesheet));
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
 
   return TRUE;
@@ -345,9 +345,9 @@ static void
 st_theme_constructed (GObject *object)
 {
   StTheme *theme = ST_THEME (object);
-  CRStyleSheet *application_stylesheet;
-  CRStyleSheet *theme_stylesheet;
-  CRStyleSheet *default_stylesheet;
+  g_autoptr(CRStyleSheet) application_stylesheet = NULL;
+  g_autoptr(CRStyleSheet) theme_stylesheet = NULL;
+  g_autoptr(CRStyleSheet) default_stylesheet = NULL;
 
   G_OBJECT_CLASS (st_theme_parent_class)->constructed (object);
 
@@ -903,7 +903,7 @@ add_matched_properties (StTheme      *a_this,
                 if (import_rule->sheet)
                   {
                     insert_stylesheet (a_this, file, import_rule->sheet);
-                    /* refcount of stylesheets starts off at zero, so we don't need to unref! */
+                    cr_stylesheet_unref (import_rule->sheet);
                   }
                 else
                   {
-- 
GitLab


From 76ba23f5b4870f16df244cb1b274d5a39e223be2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Tue, 7 May 2019 01:28:40 +0200
Subject: [PATCH 08/11] st/theme: Use CRStyleSheet app_data instead of hash map

Use the CRStyleSheet field to save stylesheet details instead of using an
extra hash table. This way we can access to the stylesheet file faster
without having to look it up.

Related-to: https://gitlab.gnome.org/GNOME/gnome-shell/issues/1265
---
 src/st/st-theme.c | 91 ++++++++++++++++++++++++++++-------------------
 1 file changed, 55 insertions(+), 36 deletions(-)

diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index 48775c7281..3b8d43c355 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -67,11 +67,23 @@ struct _StTheme
   GSList *custom_stylesheets;
 
   GHashTable *stylesheets_by_file;
-  GHashTable *files_by_stylesheet;
 
   CRCascade *cascade;
 };
 
+typedef struct _StyleSheetData
+{
+  GFile *file;
+  gboolean extension_stylesheet;
+} StyleSheetData;
+
+static void
+stylesheet_data_free (StyleSheetData *stylesheet_data)
+{
+  g_clear_object (&stylesheet_data->file);
+  g_free (stylesheet_data);
+}
+
 enum
 {
   PROP_0,
@@ -110,9 +122,10 @@ file_equal0 (GFile *file1,
 static void
 st_theme_init (StTheme *theme)
 {
-  theme->stylesheets_by_file = g_hash_table_new_full (g_file_hash, (GEqualFunc) g_file_equal,
-                                                      (GDestroyNotify)g_object_unref, (GDestroyNotify)cr_stylesheet_unref);
-  theme->files_by_stylesheet = g_hash_table_new (g_direct_hash, g_direct_equal);
+  theme->stylesheets_by_file =
+    g_hash_table_new_full (g_file_hash, (GEqualFunc) g_file_equal,
+                           (GDestroyNotify) g_object_unref,
+                           (GDestroyNotify) cr_stylesheet_unref);
 }
 
 static void
@@ -206,9 +219,6 @@ parse_stylesheet (GFile   *file,
       return NULL;
     }
 
-  /* Extension stylesheet */
-  cr_stylesheet_set_app_data (stylesheet, GUINT_TO_POINTER (FALSE), NULL);
-
   return stylesheet;
 }
 
@@ -235,19 +245,28 @@ parse_stylesheet_nofail (GFile *file)
   return result;
 }
 
-static void
+static gboolean
 insert_stylesheet (StTheme      *theme,
                    GFile        *file,
                    CRStyleSheet *stylesheet)
 {
+  StyleSheetData *stylesheet_data;
+
   if (stylesheet == NULL)
-    return;
+    return FALSE;
+
+  if (g_hash_table_contains (theme->stylesheets_by_file, file))
+    return FALSE;
+
+  stylesheet_data = g_new0 (StyleSheetData, 1);
+  stylesheet_data->file = g_object_ref (file);
 
-  g_object_ref (file);
-  cr_stylesheet_ref (stylesheet);
+  cr_stylesheet_set_app_data (stylesheet, stylesheet_data,
+                              (GDestroyNotify) stylesheet_data_free);
 
-  g_hash_table_insert (theme->stylesheets_by_file, file, stylesheet);
-  g_hash_table_insert (theme->files_by_stylesheet, stylesheet, file);
+  g_hash_table_insert (theme->stylesheets_by_file,
+                       g_object_ref (file), cr_stylesheet_ref (stylesheet));
+  return TRUE;
 }
 
 /**
@@ -266,14 +285,15 @@ st_theme_load_stylesheet (StTheme    *theme,
                           GError    **error)
 {
   g_autoptr(CRStyleSheet) stylesheet = NULL;
+  StyleSheetData *stylesheet_data;
 
   stylesheet = parse_stylesheet (file, error);
-  if (!stylesheet)
+  if (!insert_stylesheet (theme, file, stylesheet))
     return FALSE;
 
-  cr_stylesheet_set_app_data (stylesheet, GUINT_TO_POINTER (TRUE), NULL);
+  stylesheet_data = cr_stylesheet_get_app_data (stylesheet);
+  stylesheet_data->extension_stylesheet = TRUE;
 
-  insert_stylesheet (theme, file, stylesheet);
   theme->custom_stylesheets = g_slist_prepend (theme->custom_stylesheets,
                                                g_steal_pointer (&stylesheet));
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
@@ -302,16 +322,14 @@ st_theme_unload_stylesheet (StTheme    *theme,
   if (!g_slist_find (theme->custom_stylesheets, stylesheet))
     return;
 
+  g_hash_table_remove (theme->stylesheets_by_file, file);
   theme->custom_stylesheets = g_slist_remove (theme->custom_stylesheets, stylesheet);
 
-  g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
-
-  /* We need to remove the entry from the hashtable after emitting the signal
-   * since we might still access the files_by_stylesheet hashtable in
-   * _st_theme_resolve_url() during the signal emission.
+  /* We need to unref the stylesheet after emitting the signal since we might
+   * still access the stylesheet in _st_theme_resolve_url() during the signal
+   * emission.
    */
-  g_hash_table_remove (theme->stylesheets_by_file, file);
-  g_hash_table_remove (theme->files_by_stylesheet, stylesheet);
+  g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
   cr_stylesheet_unref (stylesheet);
 }
 
@@ -333,9 +351,10 @@ st_theme_get_custom_stylesheets (StTheme *theme)
   for (iter = theme->custom_stylesheets; iter; iter = iter->next)
     {
       CRStyleSheet *stylesheet = iter->data;
-      GFile *file = g_hash_table_lookup (theme->files_by_stylesheet, stylesheet);
+      StyleSheetData *stylesheet_data = cr_stylesheet_get_app_data (stylesheet);
 
-      result = g_slist_prepend (result, g_object_ref (file));
+      if (stylesheet_data && stylesheet_data->file)
+        result = g_slist_prepend (result, g_object_ref (stylesheet_data->file));
     }
 
   return result;
@@ -377,7 +396,6 @@ st_theme_finalize (GObject * object)
   theme->custom_stylesheets = NULL;
 
   g_hash_table_destroy (theme->stylesheets_by_file);
-  g_hash_table_destroy (theme->files_by_stylesheet);
 
   g_clear_object (&theme->application_stylesheet);
   g_clear_object (&theme->theme_stylesheet);
@@ -894,18 +912,18 @@ add_matched_properties (StTheme      *a_this,
 
                 if (import_rule->url->stryng && import_rule->url->stryng->str)
                   {
+                    g_autoptr(CRStyleSheet) sheet = NULL;
+
                     file = _st_theme_resolve_url (a_this,
                                                   a_nodesheet,
                                                   import_rule->url->stryng->str);
-                    import_rule->sheet = parse_stylesheet (file, NULL);
-                  }
+                    sheet = parse_stylesheet (file, NULL);
 
-                if (import_rule->sheet)
-                  {
-                    insert_stylesheet (a_this, file, import_rule->sheet);
-                    cr_stylesheet_unref (import_rule->sheet);
+                    if (insert_stylesheet (a_this, file, sheet))
+                      import_rule->sheet = sheet;
                   }
-                else
+
+                if (!import_rule->sheet)
                   {
                     /* Set a marker to avoid repeatedly trying to parse a non-existent or
                      * broken stylesheet
@@ -981,12 +999,12 @@ get_origin (const CRDeclaration * decl)
 {
   CRStyleSheet *stylesheet = decl->parent_statement->parent_sheet;
   enum CRStyleOrigin origin = stylesheet->origin;
-  gboolean is_extension_sheet = GPOINTER_TO_UINT (cr_stylesheet_get_app_data (stylesheet));
+  StyleSheetData *sheet_data = cr_stylesheet_get_app_data (stylesheet);
 
   if (decl->important)
     origin += ORIGIN_OFFSET_IMPORTANT;
 
-  if (is_extension_sheet)
+  if (sheet_data && sheet_data->extension_stylesheet)
     origin += ORIGIN_OFFSET_EXTENSION;
 
   return origin;
@@ -1065,8 +1083,9 @@ _st_theme_resolve_url (StTheme      *theme,
   else if (base_stylesheet != NULL)
     {
       GFile *base_file = NULL, *parent;
+      StyleSheetData *stylesheet_data = cr_stylesheet_get_app_data (base_stylesheet);
 
-      base_file = g_hash_table_lookup (theme->files_by_stylesheet, base_stylesheet);
+      base_file = stylesheet_data->file;
 
       /* This is an internal function, if we get here with
          a bad @base_stylesheet we have a problem. */
-- 
GitLab


From 32bbf3c41869c71b8b1ad4d76a2f7a17310eebe1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Tue, 7 May 2019 08:59:11 +0200
Subject: [PATCH 09/11] st/theme: Remove custom stylesheets list

Since we already mark the stylesheet loaded by extensions in the data, we
don't need to use another list to go trough these as we can just iterate
over the hash table with a minimum overhead, as this will normally contain
just one default stylesheet and all the extension stylesheets anyways.
---
 src/st/st-theme.c | 41 ++++++++++++++++++++++-------------------
 1 file changed, 22 insertions(+), 19 deletions(-)

diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index 3b8d43c355..de8bdbbbd2 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -64,7 +64,6 @@ struct _StTheme
   GFile *application_stylesheet;
   GFile *default_stylesheet;
   GFile *theme_stylesheet;
-  GSList *custom_stylesheets;
 
   GHashTable *stylesheets_by_file;
 
@@ -294,8 +293,6 @@ st_theme_load_stylesheet (StTheme    *theme,
   stylesheet_data = cr_stylesheet_get_app_data (stylesheet);
   stylesheet_data->extension_stylesheet = TRUE;
 
-  theme->custom_stylesheets = g_slist_prepend (theme->custom_stylesheets,
-                                               g_steal_pointer (&stylesheet));
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
 
   return TRUE;
@@ -314,21 +311,22 @@ st_theme_unload_stylesheet (StTheme    *theme,
                             GFile      *file)
 {
   CRStyleSheet *stylesheet;
+  StyleSheetData *stylesheet_data;
 
   stylesheet = g_hash_table_lookup (theme->stylesheets_by_file, file);
   if (!stylesheet)
     return;
 
-  if (!g_slist_find (theme->custom_stylesheets, stylesheet))
+  stylesheet_data = cr_stylesheet_get_app_data (stylesheet);
+  if (!stylesheet_data || !stylesheet_data->extension_stylesheet)
     return;
 
-  g_hash_table_remove (theme->stylesheets_by_file, file);
-  theme->custom_stylesheets = g_slist_remove (theme->custom_stylesheets, stylesheet);
-
-  /* We need to unref the stylesheet after emitting the signal since we might
+  /* We need to keep a reference while emitting the signal since we might
    * still access the stylesheet in _st_theme_resolve_url() during the signal
    * emission.
    */
+  cr_stylesheet_ref (stylesheet);
+  g_hash_table_remove (theme->stylesheets_by_file, file);
   g_signal_emit (theme, signals[STYLESHEETS_CHANGED], 0);
   cr_stylesheet_unref (stylesheet);
 }
@@ -346,14 +344,17 @@ GSList*
 st_theme_get_custom_stylesheets (StTheme *theme)
 {
   GSList *result = NULL;
-  GSList *iter;
+  GHashTableIter iter;
+  gpointer value;
 
-  for (iter = theme->custom_stylesheets; iter; iter = iter->next)
+  g_hash_table_iter_init (&iter, theme->stylesheets_by_file);
+
+  while (g_hash_table_iter_next (&iter, NULL, &value))
     {
-      CRStyleSheet *stylesheet = iter->data;
+      CRStyleSheet *stylesheet = value;
       StyleSheetData *stylesheet_data = cr_stylesheet_get_app_data (stylesheet);
 
-      if (stylesheet_data && stylesheet_data->file)
+      if (stylesheet_data && stylesheet_data->extension_stylesheet)
         result = g_slist_prepend (result, g_object_ref (stylesheet_data->file));
     }
 
@@ -391,10 +392,6 @@ st_theme_finalize (GObject * object)
 {
   StTheme *theme = ST_THEME (object);
 
-  g_slist_foreach (theme->custom_stylesheets, (GFunc) cr_stylesheet_unref, NULL);
-  g_slist_free (theme->custom_stylesheets);
-  theme->custom_stylesheets = NULL;
-
   g_hash_table_destroy (theme->stylesheets_by_file);
 
   g_clear_object (&theme->application_stylesheet);
@@ -1039,7 +1036,7 @@ _st_theme_get_matched_properties (StTheme        *theme,
   enum CRStyleOrigin origin = 0;
   CRStyleSheet *sheet = NULL;
   GPtrArray *props = g_ptr_array_new ();
-  GSList *iter;
+  GHashTableIter iter;
 
   g_return_val_if_fail (ST_IS_THEME (theme), NULL);
   g_return_val_if_fail (ST_IS_THEME_NODE (node), NULL);
@@ -1053,8 +1050,14 @@ _st_theme_get_matched_properties (StTheme        *theme,
       add_matched_properties (theme, sheet, node, props);
     }
 
-  for (iter = theme->custom_stylesheets; iter; iter = iter->next)
-    add_matched_properties (theme, iter->data, node, props);
+  g_hash_table_iter_init (&iter, theme->stylesheets_by_file);
+  while (g_hash_table_iter_next (&iter, NULL, (gpointer) &sheet))
+    {
+      StyleSheetData *sheet_data = cr_stylesheet_get_app_data (sheet);
+
+      if (sheet_data && sheet_data->extension_stylesheet)
+        add_matched_properties (theme, sheet, node, props);
+    }
 
   /* We count on a stable sort here so that later declarations come
    * after earlier declarations */
-- 
GitLab


From dbc8756e4702f353f309a4b7107e410d7ff88dd8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Tue, 7 May 2019 01:33:36 +0200
Subject: [PATCH 10/11] st/theme: Use utility functions to finalize objects

---
 src/st/st-theme.c | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index de8bdbbbd2..1f9b3365dd 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -392,17 +392,13 @@ st_theme_finalize (GObject * object)
 {
   StTheme *theme = ST_THEME (object);
 
-  g_hash_table_destroy (theme->stylesheets_by_file);
+  g_clear_pointer (&theme->stylesheets_by_file, g_hash_table_destroy);
 
   g_clear_object (&theme->application_stylesheet);
   g_clear_object (&theme->theme_stylesheet);
   g_clear_object (&theme->default_stylesheet);
 
-  if (theme->cascade)
-    {
-      cr_cascade_unref (theme->cascade);
-      theme->cascade = NULL;
-    }
+  g_clear_pointer (&theme->cascade, cr_cascade_unref);
 
   G_OBJECT_CLASS (st_theme_parent_class)->finalize (object);
 }
-- 
GitLab


From 1dc82b8de522ccf4d852369352ecf20bde4af7fc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Tue, 7 May 2019 01:40:13 +0200
Subject: [PATCH 11/11] st/theme: Use glib auto free/ptr features

Use g_autofree and g_autoptr for managing memory in a smarter way.
---
 src/st/st-theme.c | 22 ++++++----------------
 1 file changed, 6 insertions(+), 16 deletions(-)

diff --git a/src/st/st-theme.c b/src/st/st-theme.c
index 1f9b3365dd..2348c9431a 100644
--- a/src/st/st-theme.c
+++ b/src/st/st-theme.c
@@ -194,7 +194,7 @@ parse_stylesheet (GFile   *file,
 {
   enum CRStatus status;
   CRStyleSheet *stylesheet;
-  char *contents;
+  g_autofree char *contents = NULL;
   gsize length;
 
   if (file == NULL)
@@ -207,14 +207,11 @@ parse_stylesheet (GFile   *file,
                                           length,
                                           CR_UTF_8,
                                           &stylesheet);
-  g_free (contents);
-
   if (status != CR_OK)
     {
-      char *uri = g_file_get_uri (file);
+      g_autofree char *uri = g_file_get_uri (file);
       g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
                    "Error parsing stylesheet '%s'; errcode:%d", uri, status);
-      g_free (uri);
       return NULL;
     }
 
@@ -901,7 +898,7 @@ add_matched_properties (StTheme      *a_this,
 
             if (import_rule->sheet == NULL)
               {
-                GFile *file = NULL;
+                g_autoptr (GFile) file = NULL;
 
                 if (import_rule->url->stryng && import_rule->url->stryng->str)
                   {
@@ -923,9 +920,6 @@ add_matched_properties (StTheme      *a_this,
                      */
                     import_rule->sheet = (CRStyleSheet *) - 1;
                   }
-
-                if (file)
-                  g_object_unref (file);
               }
 
             if (import_rule->sheet != (CRStyleSheet *) - 1)
@@ -1071,20 +1065,18 @@ _st_theme_resolve_url (StTheme      *theme,
                        CRStyleSheet *base_stylesheet,
                        const char   *url)
 {
-  char *scheme;
+  g_autofree char *scheme = NULL;
   GFile *resource;
 
   if ((scheme = g_uri_parse_scheme (url)))
     {
-      g_free (scheme);
       resource = g_file_new_for_uri (url);
     }
   else if (base_stylesheet != NULL)
     {
-      GFile *base_file = NULL, *parent;
       StyleSheetData *stylesheet_data = cr_stylesheet_get_app_data (base_stylesheet);
-
-      base_file = stylesheet_data->file;
+      GFile *base_file = stylesheet_data->file;
+      g_autoptr (GFile) parent = NULL;
 
       /* This is an internal function, if we get here with
          a bad @base_stylesheet we have a problem. */
@@ -1092,8 +1084,6 @@ _st_theme_resolve_url (StTheme      *theme,
 
       parent = g_file_get_parent (base_file);
       resource = g_file_resolve_relative_path (parent, url);
-
-      g_object_unref (parent);
     }
   else
     {
-- 
GitLab

